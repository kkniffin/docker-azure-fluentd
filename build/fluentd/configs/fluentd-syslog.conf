#### LAYOUT & NOTES #######################################################################
# For Parsed Documents: keep type and add parsed to end ex: syslog.info.<type>.parsed
# * matches a single tag part.
# ** matches zero or more tag parts.
# Fluentd tries to match tags in the order that they appear in the config file.
# Can't use test.**.test.** will lock up and wont work
#
#
#
#
###########################################################################################

####################
###### SOURCES #####
####################

<source>
	@type syslog
	port 514
	bind 0.0.0.0
	tag raw.syslog
	include_source_host true
	format none
</source>

#####################
##### MANIPULATE ####
#####################

#### Add Server Received Time to Records
<filter raw.syslog.**>
	@type record_modifier
	<record>
		SyslogReceived ${Time.at(time).to_s}
	</record>
</filter>

######################################
### Match Syslog Severity & Types ####
### And Classify for Additional ######
### Processing #######################
##############################################################
## Matching Format Tag needs to be raw.<type>.<sysloglevel>
##############################################################


#### Emergency Syslog Severity 0
<match raw.syslog.*.emerg.**>
	type rewrite_tag_filter
	rewriterule1 message .+ raw.syslog.emerg.unmatched
</match>

#### Alert Syslog Severity 1
<match raw.syslog.**.alert.**>
	type rewrite_tag_filter
	rewriterule1 message .+ raw.syslog.alert.unmatched
</match>

#### Critical Syslog Severity 2
<match raw.syslog.*.crit.**>
	type rewrite_tag_filter
	rewriterule1 message ^.*PORT_SECURITY-2-PSECURE_VIOLATION.*Security.*address.*0000\.0000\.0000.*$ raw.cisco.crit.portsecuritybogus # Classify Security Violations with No MAC
	rewriterule2 message ^.*PORT_SECURITY-2-PSECURE_VIOLATION.*$ raw.cisco.crit.portsecurity # Classify Other Port Security Violations that Have Macs
	rewriterule3 message .+ raw.syslog.crit.unmatched # Classify everything else as unmatched
</match>

#### Error Syslog Severity 3
<match raw.syslog.*.err.**>
	type rewrite_tag_filter
	rewriterule1 message ^.*%LINK-3-UPDOWN.*$ raw.cisco.err.linkupdown # Classify Cisco UP/Down Messages
	rewriterule2 message .+ raw.syslog.err.unmatched # Classify everything else as unmatched
</match>

#### Warn Syslog Severity 4
<match raw.syslog.*.warn.**>
	type rewrite_tag_filter
	rewriterule1 message ^.*ARP.*0000\.0000\.0000.*$ raw.cisco.warn.arpbogus # Classify bogus ARP Packets
	rewriterule2 message ^.*SEC_LOGIN-4-LOGIN_FAILED.*$ raw.cisco.warn.loginfailed # Classify Login Failures
	rewriterule3 message .+ raw.syslog.warn.unmatched # Classify everything else as unmatched
</match>

#### Notice Syslog Severity 5
<match raw.syslog.*.notice.**>
	type rewrite_tag_filter
	rewriterule1 message ^.*SYS-5-CONFIG_I.*$ raw.cisco.notice.configchg # Classify Cisco Config Changes
	rewriterule2 message ^.*EIGRP.*$ raw.cisco.notice.eigrp # Classify Cisco EIGRP Changes
	rewriterule4 message ^.*SYS-5-RELOAD.*$ raw.cisco.notice.reload # Classify Cisco Reloads
	rewriterule5 message ^.*C4K_HWACLMAN-4.*$ raw.cisco.notice.hwacl # Classify Hardware ACL Messages 
	rewriterule6 message ^.*EC-5-BUNDLE.*$ raw.cisco.notice.portchannel # Classify Port Channel Bundling
        rewriterule7 message ^.*tac_plus\[\d+\].*$ raw.tacacs.notice # TACACS
	rewriterule8 message ^.*SEC_LOGIN-5-LOGIN_SUCCESS.*$ raw.cisco.notice.loginsuccess # Login Successful
	rewriterule9 message ^.*SEC_LOGIN-5-QUIET_MODE_OFF.*$ raw.cisco.notice.quietmodeoff # Quite Mode Off
        rewriterule10 message .+ raw.syslog.notice.unmatched # Classify everything else as unmatched
</match>

#### Info Syslog Severity 6
<match raw.syslog.*.info.**>
	type rewrite_tag_filter
	rewriterule1 message ^.*TAC_PLUS_ACCT:|tac_plus.*$ raw.tacacs.info.accounting # Match TACACS Records
	rewriterule2 message ^.*POWERSUPPLY.*$ raw.cisco.info.powersupply # Match Power Supply Records
	rewriterule3 message ^.*EIGRP.*$ raw.cisco.info.eigrp # EIGRP Messages
	rewriterule4 message ^.*EM-6-LOG.*$ raw.cisco.info.sla # SLA Errors
	rewriterule5 message .+ raw.syslog.info.unmatched # Match everything else not matched and don't alert
</match>

#### Debug Syslog Severity 7
<match raw.syslog.*.debug.**>
	type rewrite_tag_filter
	rewriterule1 message .+ raw.syslog.debug.noalert # Match everything else not matched and don't alert
</match>

##################################
## Tag Record with Syslog Level ##
##################################

## Emergency
<filter raw.*.emerg.**>
  @type record_modifier
  <record>
    SyslogLevel Emergency
  </record>
</filter>

## Alert
<filter raw.*.alert.**>
  @type record_modifier
  <record>
    SyslogLevel Alert
  </record>
</filter>

## Critical
<filter raw.*.crit.**>
  @type record_modifier
  <record>
    SyslogLevel Critical
  </record>
</filter>

## Error
<filter raw.*.err.**>
  @type record_modifier
  <record>
    SyslogLevel Error
  </record>
</filter>

## Warning
<filter raw.*.warn.**>
  @type record_modifier
  <record>
    SyslogLevel Warning
  </record>
</filter>

## Notice
<filter raw.*.notice.**>
  @type record_modifier
  <record>
    SyslogLevel Notice
  </record>
</filter>

## Informational
<filter raw.*.info.**>
  @type record_modifier
  <record>
    SyslogLevel Informational
  </record>
</filter>

## Debugging
<filter raw.*.debug.**>
  @type record_modifier
  <record>
    SyslogLevel Debugging
  </record>
</filter>

####################################

#### Parse out Cisco Style Sylog Messages
######## Cisco Commands Used to Create Log Entry:
######## logging host <ip> session-id hostname sequence-num-session
######## service sequence-numbers
<match raw.**>
	@type parser
	key_name message
	remove_prefix raw # WILL REMOVE raw PREFIX WHETHER OR NOT IT MATCHES
	reserve_data yes
	format /^.+s_sn[ ]?="(?<MessageID>\d+)" s_id.+"(?<DeviceName>.+):(?<DevicePort>\d+)"\]: \d+: (?<LogDate>.*): %(?<MsgType>(\w|-)+): (?<Message>.*)$/
	suppress_parse_error_log true
</match>

######## Cisco Commands Used to Create Log Entry:
######## logging host <ip> session-id hostname sequence-num-session
######## no service sequence-numbers
<match raw.**>
	@type parser
	key_name message
	remove_prefix raw # WILL REMOVE raw PREFIX WHETHER OR NOT IT MATCHES
	reserve_data yes
	format /^.+s_sn[ ]?="(?<MessageID>\d+)" s_id.+"(?<DeviceName>.+):(?<DevicePort>\d+)"\]: (?<LogDate>.*): %(?<MsgType>(\w|-)+): (?<Message>.*)$/
	suppress_parse_error_log true
</match>

#############################
##### ADDITONAL PARSING #####
#############################

# Cisco Login Success, Extract Relevant Fields:
<match cisco.notice.loginsuccess>
        @type parser
        key_name message
        reserve_data yes
        format /^.*\[user: (?<User>.+?)\].* at (?<LogDate>\d+:\d+:\d+ [A-Za-z]{3} .+? \d+ \d{4}).*$/
        suppress_parse_error_log false
        tag cisco.notice.loginsuccess.parsed
</match>

# Cisco Login Failure, Extract Relevant Fields:
<match cisco.warn.loginfailed>
        @type parser
        key_name message
        reserve_data yes
        format /^.*\[user: (?<User>.+?)\].*$/
        suppress_parse_error_log false
        tag cisco.warn.loginfailed.parsed
</match>

# Cisco Login Failure, Extract Relevant Fields:
<match cisco.notice.quietmodeoff>
        @type parser
        key_name message
        reserve_data yes
        format /^.* timed out at (?<BlockTimeOut>.+?)$/
        suppress_parse_error_log false
        tag cisco.notice.quietmodeoff.parsed
</match>


# If Classified Port Security, Pull out Relevant Fields:
###### Port Security MAC Address
###### Port Security Switch Interface
<match cisco.crit.portsecurity>
        @type parser
        key_name message
        reserve_data yes
        format /^.*address (?<PortsecMac>\w+\.\w+\.\w+).+(port (?<PortsecInterface>.+?)|(?<PortsecInterface>VLAN .+?))\.?$/
        suppress_parse_error_log false
	tag cisco.crit.portsecurity.parsed
</match>

## Match TAC_PLUS @ http://www.shrubbery.net/tac_plus/
##
###### RSYSLOG TAC_PLUS Config File on TAC_PLUS Server###
# $ModLoad imfile
## Input Files
#$InputFileName <tac_plus accouting log file>
#$InputFileTag TAC_PLUS_ACCT:
#$InputFileStateFile /var/spool/rsyslog/tac_plus.state
#$InputFileSeverity info
#$InputFileFacility local3
#$InputRunFileMonitor
## TAC_PLUS Log to Syslog Server
#local3.*                        @<fluentd server>
########################################################

<match tacacs.info.accounting>
	@type parser
	key_name message
	reserve_data yes
	format /^.*\[.+\]:.*from (?<TacacsDeviceHostname>.+) \[(?<TacacsDeviceIP>.+)\]$/
	suppress_parse_error_log true
	tag tacacs.hostip.parsed # Modify tag so will go into ES as tacacs-<date>
</match>

# Parse Out TACACS ACCT Fields
<match tacacs.hostip.parsed>
        @type parser
        key_name message
        reserve_data yes
        format /^(?<LogDateTime>.*) (?<LogHostname>.*) (?<LogType>.+): (?<TacacsMessageDate>.+)\t(?<TacacsDeviceHost>.+)\t(?<TacacsUser>.*)\t(?<TacacsLine>.*)\t(?<TacacsUserIP>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\t(?<TacacsOperation>.+?)\t(?<TacacsRemainingMessage>.*)$/
        suppress_parse_error_log true
	tag tacacs.message.parsed
</match>

# Match TACACS remaining message field and split the ltsv pairs in the tacacs_remaining_message
<match tacacs.message.parsed>
	@type fields_autotype
	add_tag_prefix kvpairs # Becomes kvpairs.tacacs.message.parsed
	parse_key TacacsRemainingMessage
	pattern (\S+)=([a-zA-Z0-9/ -]+)
</match>

<match kvpairs.tacacs.message.parsed>
  @type rewrite_tag_filter
  rewriterule1 message .+ ${tag_parts[0]}.${tag_parts[1]}.parsedfinal # becomes tacacs.message.parsedfinal
  remove_tag_prefix kvpairs # Becomes tacacs.message.parsedfinal
</match>

# Remove tacacs_remaining_message field after being parsed
<filter tacacs.message.parsedfinal>
	@type record_modifier
	remove_keys TacacsRemainingMessage
</filter>

######################
##### OUTPUT #########
######################

<match **>
        @type forest
        subtype copy
        <template>
                <store>
                        @type elasticsearch
                        hosts "#{ENV['ES_SERVER']},#{ENV['ES_SERVER2']}"
                        user "#{ENV['ES_USER']}"
                        password "#{ENV['ES_PASSWORD']}"
                        port 9200
                        logstash_format true
                        logstash_prefix ${tag_parts[0]}
                        utc_index true
                        flatten_hashes true
                        flatten_hashes_separator _
                </store>
        </template>
        <case syslog.**.unmatched>
                <store>
                        @type elasticsearch
                        hosts "#{ENV['ES_SERVER']},#{ENV['ES_SERVER2']}"
                        user "#{ENV['ES_USER']}"
                        password "#{ENV['ES_PASSWORD']}"
                        port 9200
                        logstash_format true
                        logstash_prefix ${tag_parts[0]}
                        utc_index true
                        flatten_hashes true
                        flatten_hashes_separator _
                </store>
                <store>
                        @type file
                        time_slice_format %Y%m%d%H
                        compress gz
                        path /data_log/__TAG__.*.log
                </store>
        </case>
</match>
