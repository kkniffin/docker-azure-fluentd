## This is a sample configuration file. See the nxlog reference manual about the
## configuration options. It should be installed locally and is also available
## online at http://nxlog.org/docs/

## Please set the ROOT to the folder your nxlog was installed into,
## otherwise it will not start.

#define ROOT C:\Program Files\nxlog
define ROOT C:\Program Files (x86)\nxlog

####### MODIFY THESE DIRECTORIES ############

define DHCPDIR F:\DHCP
define IISDIR F:\IIS
define NPSDIR F:\NPS
define DNSDIR C:\LOGS\DNS
define FLUENTDIP 1.1.1.1

# Also confirm that the parsing settings are correct for DHCP, IIS

#############################################

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
# Disable Local Logging as Logs go to FluentD
LogFile %ROOT%\data\nxlog.log 

###### EXTENSIONS ##########
############################

<Extension _syslog>
	Module      xm_syslog
</Extension>

<Extension multiline>
	Module	xm_multiline
    	HeaderLine	/^<Event>/
    	EndLine		/^</Event>/
</Extension>

<Extension xmlparser>
	Module	xm_xml
</Extension>

<Extension json>
	Module	xm_json
</Extension>


# IIS 22 Fields in Log File
<Extension w3c1_22>
        Module  xm_csv
		Fields $LogDate, $LogTime, $S-Sitename, $S-Computername, $S-IP, $Cs-Method, $Cs-Uri-Stem, $Cs-Uri-Query, $S-Port, $Cs-Username, $C-IP, $Cs-Version, $Cs-User-Agent, $Cs-Cookie, $Cs-Referer, $Cs-Host, $Sc-Status, $Sc-Substatus, $Sc-Win32-Status, $Sc-Bytes, $Cs-Bytes, $Time-Taken
        Delimiter       ' '
</Extension>

# IIS 16 Fields in Log File Server 2008
<Extension w3c1_16>
        Module  xm_csv
		Fields $LogDate, $LogTime, $S-IP, $Cs-Method, $Cs-Uri-Stem, $Cs-Uri-Query, $S-Port, $Cs-Username, $C-IP, $Cs-User-Agent, $Sc-Status, $Sc-Substatus, $Sc-Win32-Status, $Sc-Bytes, $Cs-Bytes, $Time-Taken
        Delimiter       ' '
</Extension>

# IIS 14 Fields in Log File V8.0
<Extension w3c1_14>
        Module  xm_csv
		Fields $S-IP, $Cs-Method, $Cs-Uri-Stem, $Cs-Uri-Query, $S-Port, $Cs-Username, $C-IP, $Cs-User-Agent, $Cs-Referer, $Sc-Status, $Sc-Substatus, $Sc-Win32-Status, $Sc-Bytes, $Time-Taken	
        Delimiter       ' '
</Extension>

####### PROCESSOR ######
########################

#memory: max 50MB, log warning at 10MB
#disk: max 1GB, log warning at 768MB

<Processor membuffer_high>
    	Module  pm_buffer
    	# 50MB MAX
	MaxSize 50000
    	Type    Mem
   	# 20MB WARN
	WarnLimit   25000
</Processor>

<Processor diskbuffer_high>
    	Module  pm_buffer
    	# 1GB MAX
	MaxSize 1000000
    	Type    Disk
    	File    "C:\\Windows\\Temp\\nxlog_diskbuffer_high_temp"
    	# 768MB WARN
	WarnLimit   768000
</Processor>

<Processor membuffer_low>
    	Module  pm_buffer
    	# 50MB MAX
	MaxSize 50000
    	Type    Mem
   	# 20MB WARN
	WarnLimit   25000
</Processor>

<Processor diskbuffer_low>
    	Module  pm_buffer
    	# 1GB MAX
	MaxSize 1000000
    	Type    Disk
    	File    "C:\\Windows\\Temp\\nxlog_diskbuffer_low_temp"
    	# 768MB WARN
	WarnLimit   768000
</Processor>
####### INPUTS ###########
##########################

###################
# NXLOG Log Parsing
###################
<Input in_nxlog_internal>
	Module	im_internal
	<Exec>
		$NXLogFileType = "nxlog";
		$NXLogHost = hostname_fqdn();
		$NXLogHostTimezone = strftime(now(), "%z");
		#
		# Adjust Event Log Date & Time from Log Record and Add Timezone of Host
		$EventDateTime = $EventTime + " " + strftime(now(), "%z");
		# Change to Abbreviated Timezone for Elasticsearch Search
		$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
		$EventDateTime =~ s/Eastern Standard Time/EST/;
		$EventDateTime =~ s/Atlantic Standard Time/AST/;
		$EventDateTime =~ s/Central Standard Time/CST/;
		$EventDateTime =~ s/Central Daylight Time/CDT/;
		$EventDateTime =~ s/Mountain Standard Time/MST/;
		$EventDateTime =~ s/Mountain Daylight Time/MDT/;
		$EventDateTime =~ s/Pacific Standard Time/PST/;
		$EventDateTime =~ s/Pacific Daylight Time/PDT/;
		$EventDateTime =~ s/Coordinated Universal Time/UTC/;
		# Creates Format of 2016-10-08 23:39:50 EDT
		#
		# EventReceivedTime as Integer for Milliseconds Since Epoch
		$EventTime = integer(now()) / 1000;
		# Rename EventReceivedTime to NXLogReceivedTime
		rename_field("EventTime","NXLogReceivedTime");
		#
		# Convert to JSON
		to_json();
	</Exec>
</Input>

###################
# DNS Log Parsing
###################
<Input in_dns>
    	Module	im_file
    	File        "%DNSDIR%\\dns.log"
    	SavePos     TRUE
    	InputType   LineBased
	<Exec>
		if $raw_event !~ /^[0-9]{1,2}\// drop();
		$Message = $raw_event;
		if $Message =~ /^(\d+\/\d+\/\d+)\s+(\d+:\d+:\d+ (AM|PM))\s+([A-Za-z0-9]+)\s+([A-Za-z]+?)\s+([A-Za-z0-9]+)\s+(UDP|TCP)\s+(.+?)\s+(.+?)\s+(.+?)\s+(R|\s)\s+(Q|N|U|\?)\s+\[(.+?)\s+([ATDR\s]+)\s+(.+?)\]\s+(.+?)\s+(.+?)$/
			{
				$LogDate = $1;
				$LogTime = $2;
				$ThreadID = $4;
				$Context = $5;
				$InternalPacketIdentifier = $6;
				$UDPTCPIndicator = $7;
				$SendReceiveIndicator = $8;
				$RemoteIP = $9;
				$XIDHex = $10;
				$QueryResponse = $11;
				$Opcode = $12;
				$FlagsHex = $13;
				$FlagsCharCodes = $14;
				$ResponseCode = $15;
				$QuestionType = $16;
				$QuestionName = $17;
				# Replace (number) with .
				$QuestionName =~ s/\([0-9]+\)/./g;
				# Remove Leading Dot
				$QuestionName =~ s/^.//;
				# Remove Trailing Dot
				$QuestionName =~ s/.$//;
				# Combine fields from Logfile
				$EventDateTime = $LogDate + " " + $LogTime + " " + strftime(now(), "%z");
				$EventDateTime =~ s/\//-/g; # Replace / with -
				# Change to Abbreviated Timezone for Elasticsearch Search
				$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
				$EventDateTime =~ s/Eastern Standard Time/EST/;
				$EventDateTime =~ s/Atlantic Standard Time/AST/;
				$EventDateTime =~ s/Central Standard Time/CST/;
				$EventDateTime =~ s/Central Daylight Time/CDT/;
				$EventDateTime =~ s/Mountain Standard Time/MST/;
				$EventDateTime =~ s/Mountain Daylight Time/MDT/;
				$EventDateTime =~ s/Pacific Standard Time/PST/;
				$EventDateTime =~ s/Pacific Daylight Time/PDT/;
				$EventDateTime =~ s/Coordinated Universal Time/UTC/;
				# Creates Format from Log File as 10-8-2016 10:43:42 PM EST
				#
				# EventReceivedTime as Integer for Milliseconds Since Epoch
				$EventReceivedTime = integer(now()) / 1000;
				# Rename EventReceivedTime to NXLogReceivedTime
				rename_field("EventReceivedTime","NXLogReceivedTime");
				#
				$NXLogFileType = "dns";
				$NXLogHost = hostname_fqdn();
				$NXLogHostTimezone = strftime(now(), "%z");
			}
		# Convert to JSON
		to_json();
	</Exec>
</Input>

#####################################
# DHCP Log Parsing 19 Fields 2012/R2
#####################################
<Input in_dhcp_19fields>
    	Module      im_file
    	File        "%DHCPDIR%\\DhcpSrvLog-*.log"
    	SavePos     TRUE
    	InputType   LineBased
	<Exec>
		if $raw_event !~ /^[0-9][0-9],/ drop();
		$Message = $raw_event;

		# 19 Fields
		if $Message =~ /^(\d+),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*),(.*?),(.*?),(.*?),(.*?)$/
			{
				$ID = $1;
				$LogDate = $2;
				$LogTime = $3;
				$Description = $4;
				$IPAddress = $5;
				$ReportedHostname = $6;
				$MACAddress = $7;
				$Username = $8;
				$TransactionID = $9;
				$QResult = $10;
				$ProbationTime = $11;
				$CorrelationID = $12;
				$Dhcid = $13;
				$VendorclassHex = $14;
				$VendorclassASCII = $15;
				$UserclassHex = $16;
				$UserclassASCII = $17;
				$RelayAgentInformation = $18;
				$DNSRegerror = $19;
				#
				if $raw_event =~ /^00/ $IDDef = "The log was started.";						
				if $raw_event =~ /^01/ $IDDef = "The log was stopped.";						
				if $raw_event =~ /^02/ $IDDef = "The log was temporarily paused due to low disk space.";	
				if $raw_event =~ /^10/ $IDDef = "A new IP address was leased to a client.";			
				if $raw_event =~ /^11/ $IDDef = "A lease was renewed by a client.";				
				if $raw_event =~ /^12/ $IDDef = "A lease was released by a client.";				
				if $raw_event =~ /^13/ $IDDef = "An IP address was found to be in use on the network.";		
				if $raw_event =~ /^14/ $IDDef = "A lease request could not be satisfied because the scope's address pool was exhausted.";	
				if $raw_event =~ /^15/ $IDDef = "A lease was denied.";										
				if $raw_event =~ /^16/ $IDDef = "A lease was deleted.";										
				if $raw_event =~ /^17/ $IDDef = "A lease was expired and DNS records for an expired leases have not been deleted.";		
				if $raw_event =~ /^18/ $IDDef = "A lease was expired and DNS records were deleted.";						
				if $raw_event =~ /^20/ $IDDef = "A BOOTP address was leased to a client.";							
				if $raw_event =~ /^21/ $IDDef = "A dynamic BOOTP address was leased to a client.";						
				if $raw_event =~ /^22/ $IDDef = "A BOOTP request could not be satisfied because the scope's address pool for BOOTP was exhausted.";	
				if $raw_event =~ /^23/ $IDDef = "A BOOTP IP address was deleted after checking to see it was not in use.";				
				if $raw_event =~ /^24/ $IDDef = "IP address cleanup operation has began.";								
				if $raw_event =~ /^25/ $IDDef = "IP address cleanup statistics.";									
				if $raw_event =~ /^30/ $IDDef = "DNS update request to the named DNS server.";								
				if $raw_event =~ /^31/ $IDDef = "DNS update failed.";											
				if $raw_event =~ /^32/ $IDDef = "DNS update successful.";										
				if $raw_event =~ /^33/ $IDDef = "Packet dropped due to NAP policy.";									
				if $raw_event =~ /^34/ $IDDef = "DNS update request failed.as the DNS update request queue limit exceeded.";				
				if $raw_event =~ /^35/ $IDDef = "DNS update request failed.";										
				if $raw_event =~ /^36/ $IDDef = "Packet dropped because the server is in failover standby role or the hash of the client ID does not match.";	
				if $raw_event =~ /^[5-9][0-9]/ $IDDef = "Codes above 50 are used for Rogue Server Detection information.";					
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,0,/ $QResultDef = "NoQuarantine";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,1,/ $QResultDef = "Quarantine";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,2,/ $QResultDef = "Drop Packet";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,3,/ $QResultDef = "Probation";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,6,/ $QResultDef = "No Quarantine Information ProbationTime:Year-Month-Day Hour:Minute:Second:MilliSecond.";
				#
				$NXLogFileType = "dhcp";
				$NXLogHost = hostname_fqdn();
				$NXLogHostTimezone = strftime(now(), "%z");
				#
				# Combine fields from Logfile
				$EventDateTime = $LogDate + " " + $LogTime + " " + strftime(now(), "%z");
				$EventDateTime =~ s/\//-/g; # Replace / with -
				# Change to Abbreviated Timezone for Elasticsearch Search
				$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
				$EventDateTime =~ s/Eastern Standard Time/EST/;
				$EventDateTime =~ s/Atlantic Standard Time/AST/;
				$EventDateTime =~ s/Central Standard Time/CST/;
				$EventDateTime =~ s/Central Daylight Time/CDT/;
				$EventDateTime =~ s/Mountain Standard Time/MST/;
				$EventDateTime =~ s/Mountain Daylight Time/MDT/;
				$EventDateTime =~ s/Pacific Standard Time/PST/;
				$EventDateTime =~ s/Pacific Daylight Time/PDT/;
				$EventDateTime =~ s/Coordinated Universal Time/UTC/;
				# Creates Format from Log File as 10-08-16 22:52:27 EDT
				#
				# EventReceivedTime as Integer for Milliseconds Since Epoch
				$EventReceivedTime = integer(now()) / 1000;
				# Rename EventReceivedTime to NXLogReceivedTime
				rename_field("EventReceivedTime","NXLogReceivedTime");
			}
		
		# Convert to JSON
		to_json();
	</Exec>
</Input>


###########################
# DHCP Log Parsing 18 Fields
###########################
<Input in_dhcp_18fields>
    	Module      im_file
    	File        "%DHCPDIR%\\DhcpSrvLog-*.log"
    	SavePos     TRUE
    	InputType   LineBased
	<Exec>
		if $raw_event !~ /^[0-9][0-9],/ drop();
		$Message = $raw_event;
		
		# 18 Fields
		if $Message =~ /^(\d+),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*),(.*?),(.*?),(.*?)$/
			{
				$ID = $1;
				$LogDate = $2;
				$LogTime = $3;
				$Description = $4;
				$IPAddress = $5;
				$ReportedHostname = $6;
				$MACAddress = $7;
				$Username = $8;
				$TransactionID = $9;
				$QResult = $10;
				$ProbationTime = $11;
				$CorrelationID = $12;
				$Dhcid = $13;
				$VendorclassHex = $14;
				$VendorclassASCII = $15;
				$UserclassHex = $16;
				$UserclassASCII = $17;
				$RelayAgentInformation = $18;
				#
				if $raw_event =~ /^00/ $IDDef = "The log was started.";						
				if $raw_event =~ /^01/ $IDDef = "The log was stopped.";						
				if $raw_event =~ /^02/ $IDDef = "The log was temporarily paused due to low disk space.";	
				if $raw_event =~ /^10/ $IDDef = "A new IP address was leased to a client.";			
				if $raw_event =~ /^11/ $IDDef = "A lease was renewed by a client.";				
				if $raw_event =~ /^12/ $IDDef = "A lease was released by a client.";				
				if $raw_event =~ /^13/ $IDDef = "An IP address was found to be in use on the network.";		
				if $raw_event =~ /^14/ $IDDef = "A lease request could not be satisfied because the scope's address pool was exhausted.";	
				if $raw_event =~ /^15/ $IDDef = "A lease was denied.";										
				if $raw_event =~ /^16/ $IDDef = "A lease was deleted.";										
				if $raw_event =~ /^17/ $IDDef = "A lease was expired and DNS records for an expired leases have not been deleted.";		
				if $raw_event =~ /^18/ $IDDef = "A lease was expired and DNS records were deleted.";						
				if $raw_event =~ /^20/ $IDDef = "A BOOTP address was leased to a client.";							
				if $raw_event =~ /^21/ $IDDef = "A dynamic BOOTP address was leased to a client.";						
				if $raw_event =~ /^22/ $IDDef = "A BOOTP request could not be satisfied because the scope's address pool for BOOTP was exhausted.";	
				if $raw_event =~ /^23/ $IDDef = "A BOOTP IP address was deleted after checking to see it was not in use.";				
				if $raw_event =~ /^24/ $IDDef = "IP address cleanup operation has began.";								
				if $raw_event =~ /^25/ $IDDef = "IP address cleanup statistics.";									
				if $raw_event =~ /^30/ $IDDef = "DNS update request to the named DNS server.";								
				if $raw_event =~ /^31/ $IDDef = "DNS update failed.";											
				if $raw_event =~ /^32/ $IDDef = "DNS update successful.";										
				if $raw_event =~ /^33/ $IDDef = "Packet dropped due to NAP policy.";									
				if $raw_event =~ /^34/ $IDDef = "DNS update request failed.as the DNS update request queue limit exceeded.";				
				if $raw_event =~ /^35/ $IDDef = "DNS update request failed.";										
				if $raw_event =~ /^36/ $IDDef = "Packet dropped because the server is in failover standby role or the hash of the client ID does not match.";	
				if $raw_event =~ /^[5-9][0-9]/ $IDDef = "Codes above 50 are used for Rogue Server Detection information.";					
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,0,/ $QResultDef = "NoQuarantine";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,1,/ $QResultDef = "Quarantine";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,2,/ $QResultDef = "Drop Packet";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,3,/ $QResultDef = "Probation";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,6,/ $QResultDef = "No Quarantine Information ProbationTime:Year-Month-Day Hour:Minute:Second:MilliSecond.";
				#
				$NXLogFileType = "dhcp";
				$NXLogHost = hostname_fqdn();
				$NXLogHostTimezone = strftime(now(), "%z");
				#
				# Combine fields from Logfile
				$EventDateTime = $LogDate + " " + $LogTime + " " + strftime(now(), "%z");
				$EventDateTime =~ s/\//-/g; # Replace / with -
				# Change to Abbreviated Timezone for Elasticsearch Search
				$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
				$EventDateTime =~ s/Eastern Standard Time/EST/;
				$EventDateTime =~ s/Atlantic Standard Time/AST/;
				$EventDateTime =~ s/Central Standard Time/CST/;
				$EventDateTime =~ s/Central Daylight Time/CDT/;
				$EventDateTime =~ s/Mountain Standard Time/MST/;
				$EventDateTime =~ s/Mountain Daylight Time/MDT/;
				$EventDateTime =~ s/Pacific Standard Time/PST/;
				$EventDateTime =~ s/Pacific Daylight Time/PDT/;
				$EventDateTime =~ s/Coordinated Universal Time/UTC/;
				# Creates Format from Log File as 10-08-16 22:52:27 EDT
				#
				# EventReceivedTime as Integer for Milliseconds Since Epoch
				$EventReceivedTime = integer(now()) / 1000;
				# Rename EventReceivedTime to NXLogReceivedTime
				rename_field("EventReceivedTime","NXLogReceivedTime");
			}
		
		# Convert to JSON
		to_json();
	</Exec>
</Input>

###########################
# DHCP Log Parsing 12 Fields
###########################
<Input in_dhcp_12fields>
    	Module      im_file
    	File        "%DHCPDIR%\\DhcpSrvLog-*.log"
    	SavePos     TRUE
    	InputType   LineBased
	<Exec>
		if $raw_event !~ /^[0-9][0-9],/ drop();
		$Message = $raw_event;
		
		# 12 Fields
		if $Message =~ /^(\d+),(.*?),(.*?),(.*?),(.*?),(.*?),(.*?),(.*),(.*?),(.*?),(.*?),(.*?),$/
			{
				$ID = $1;
				$LogDate = $2;
				$LogTime = $3;
				$Description = $4;
				$IPAddress = $5;
				$ReportedHostname = $6;
				$MACAddress = $7;
				$Username = $8;
				$TransactionID = $9;
				$QResult = $10;
				$ProbationTime = $11;
				$CorrelationID = $12;
				#
				if $raw_event =~ /^00/ $IDDef = "The log was started.";						
				if $raw_event =~ /^01/ $IDDef = "The log was stopped.";						
				if $raw_event =~ /^02/ $IDDef = "The log was temporarily paused due to low disk space.";	
				if $raw_event =~ /^10/ $IDDef = "A new IP address was leased to a client.";			
				if $raw_event =~ /^11/ $IDDef = "A lease was renewed by a client.";				
				if $raw_event =~ /^12/ $IDDef = "A lease was released by a client.";				
				if $raw_event =~ /^13/ $IDDef = "An IP address was found to be in use on the network.";		
				if $raw_event =~ /^14/ $IDDef = "A lease request could not be satisfied because the scope's address pool was exhausted.";	
				if $raw_event =~ /^15/ $IDDef = "A lease was denied.";										
				if $raw_event =~ /^16/ $IDDef = "A lease was deleted.";										
				if $raw_event =~ /^17/ $IDDef = "A lease was expired and DNS records for an expired leases have not been deleted.";		
				if $raw_event =~ /^18/ $IDDef = "A lease was expired and DNS records were deleted.";						
				if $raw_event =~ /^20/ $IDDef = "A BOOTP address was leased to a client.";							
				if $raw_event =~ /^21/ $IDDef = "A dynamic BOOTP address was leased to a client.";						
				if $raw_event =~ /^22/ $IDDef = "A BOOTP request could not be satisfied because the scope's address pool for BOOTP was exhausted.";	
				if $raw_event =~ /^23/ $IDDef = "A BOOTP IP address was deleted after checking to see it was not in use.";				
				if $raw_event =~ /^24/ $IDDef = "IP address cleanup operation has began.";								
				if $raw_event =~ /^25/ $IDDef = "IP address cleanup statistics.";									
				if $raw_event =~ /^30/ $IDDef = "DNS update request to the named DNS server.";								
				if $raw_event =~ /^31/ $IDDef = "DNS update failed.";											
				if $raw_event =~ /^32/ $IDDef = "DNS update successful.";										
				if $raw_event =~ /^33/ $IDDef = "Packet dropped due to NAP policy.";									
				if $raw_event =~ /^34/ $IDDef = "DNS update request failed.as the DNS update request queue limit exceeded.";				
				if $raw_event =~ /^35/ $IDDef = "DNS update request failed.";										
				if $raw_event =~ /^36/ $IDDef = "Packet dropped because the server is in failover standby role or the hash of the client ID does not match.";	
				if $raw_event =~ /^[5-9][0-9]/ $IDDef = "Codes above 50 are used for Rogue Server Detection information.";					
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,0,/ $QResultDef = "NoQuarantine";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,1,/ $QResultDef = "Quarantine";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,2,/ $QResultDef = "Drop Packet";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,3,/ $QResultDef = "Probation";									
				if $raw_event =~ /^.+,.+,.+,.+,.+,.+,.+,.+,6,/ $QResultDef = "No Quarantine Information ProbationTime:Year-Month-Day Hour:Minute:Second:MilliSecond.";
				#
				$NXLogFileType = "dhcp";
				$NXLogHost = hostname_fqdn();
				$NXLogHostTimezone = strftime(now(), "%z");
				#
				# Combine fields from Logfile
				$EventDateTime = $LogDate + " " + $LogTime + " " + strftime(now(), "%z");
				$EventDateTime =~ s/\//-/g; # Replace / with -
				# Change to Abbreviated Timezone for Elasticsearch Search
				$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
				$EventDateTime =~ s/Eastern Standard Time/EST/;
				$EventDateTime =~ s/Atlantic Standard Time/AST/;
				$EventDateTime =~ s/Central Standard Time/CST/;
				$EventDateTime =~ s/Central Daylight Time/CDT/;
				$EventDateTime =~ s/Mountain Standard Time/MST/;
				$EventDateTime =~ s/Mountain Daylight Time/MDT/;
				$EventDateTime =~ s/Pacific Standard Time/PST/;
				$EventDateTime =~ s/Pacific Daylight Time/PDT/;
				$EventDateTime =~ s/Coordinated Universal Time/UTC/;
				# Creates Format from Log File as 10-08-16 22:52:27 EDT
				#
				# EventReceivedTime as Integer for Milliseconds Since Epoch
				$EventReceivedTime = integer(now()) / 1000;
				# Rename EventReceivedTime to NXLogReceivedTime
				rename_field("EventReceivedTime","NXLogReceivedTime");
			}
		# Convert to JSON
		to_json();
	</Exec>
</Input>


###################
# IIS Log Parsing
###################
<Input in_iis>
	Module		im_file
    	File		"%IISDIR%\\W3SVC1\\u_ex*.log"
    	SavePos  	TRUE
	<Exec>
		if $raw_event =~ /^#/ drop();
       		else
		{
			$Message = $raw_event;
            		w3c1_22->parse_csv();
			$NXLogFileType = "iis";
			$NXLogHost = hostname_fqdn();
			$NXLogHostTimezone = strftime(now(), "%z");
			# Parse Date Time from IIS Log Files, they are in UTC
			$EventDateTime = parsedate($LogDate + " " + $LogTime);
			# Change Log format to UTC
			$EventDateTime = strftime($EventDateTime, "%Y-%m-%dT%H:%M:%SZ");
			# Creates Format of 2016-10-09T02:50:55Z
			#
			# EventReceivedTime as Integer for Milliseconds Since Epoch
			$EventReceivedTime = integer(now()) / 1000;
			rename_field("EventReceivedTime","NXLogReceivedTime");			
			to_json();
       		}
	</Exec>
</Input>


#####################################
# Windows Event Standard Log Parsing
#####################################

<Input in_wineventlog_standard>
	Module	im_msvistalog
	<QueryXML>
		<QueryList>
			<Query Id="0" Path="Security">
				<Select Path="Security">*</Select>
				<Select Path="Setup">*</Select>
				<Select Path="Microsoft-Windows-Windows Firewall With Advanced Security/Firewall">*</Select>
				<Select Path="Windows PowerShell">*</Select>
				<Select Path="Application">*[System[(Level=1  or Level=2 or Level=3)]]</Select>
				<Select Path="System">*[System[(Level=1  or Level=2 or Level=3)]]</Select>
				<Select Path="HardwareEvents">*[System[(Level=1  or Level=2 or Level=3)]]</Select>
			</Query>
		</QueryList>
	</QueryXML>
	<Exec>
		$NXLogFileType = "wineventlog";
		$NXLogHost = hostname_fqdn();
		$NXLogHostTimezone = strftime(now(), "%z");

		# Adjust Event Log Date & Time from Log Record and Add Timezone of Host
		$EventDateTime = $EventTime + " " + strftime(now(), "%z");
		# Change to Abbreviated Timezone for Elasticsearch Search
		$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
		$EventDateTime =~ s/Eastern Standard Time/EST/;
		$EventDateTime =~ s/Atlantic Standard Time/AST/;
		$EventDateTime =~ s/Central Standard Time/CST/;
		$EventDateTime =~ s/Central Daylight Time/CDT/;
		$EventDateTime =~ s/Mountain Standard Time/MST/;
		$EventDateTime =~ s/Mountain Daylight Time/MDT/;
		$EventDateTime =~ s/Pacific Standard Time/PST/;
		$EventDateTime =~ s/Pacific Daylight Time/PDT/;
		$EventDateTime =~ s/Coordinated Universal Time/UTC/;
		# Creates Format of 2016-10-08 23:39:50 EDT
		#
		# EventTime as Integer for Milliseconds Since Epoch
		$EventTime = integer(now()) / 1000;
		# Rename EventReceivedTime to NXLogReceivedTime
		rename_field("EventTime","NXLogReceivedTime");
		# Convert to JSON
      		to_json();
	</Exec>
</Input>

#####################################
# Windows Additional Logs Parsing
#####################################

<Input in_wineventlog_additional>
	Module	im_msvistalog
	<QueryXML>
		<QueryList>
			<Query Id="0" Path="Security">
				<Select Path="Microsoft-Windows-Windows Firewall With Advanced Security/Firewall">*</Select>
				<Select Path="Windows PowerShell">*</Select>
			</Query>
		</QueryList>
	</QueryXML>
	<Exec>
		$NXLogFileType = "wineventlog";
		$NXLogHost = hostname_fqdn();
		$NXLogHostTimezone = strftime(now(), "%z");

		# Adjust Event Log Date & Time from Log Record and Add Timezone of Host
		$EventDateTime = $EventTime + " " + strftime(now(), "%z");
		# Change to Abbreviated Timezone for Elasticsearch Search
		$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
		$EventDateTime =~ s/Eastern Standard Time/EST/;
		$EventDateTime =~ s/Atlantic Standard Time/AST/;
		$EventDateTime =~ s/Central Standard Time/CST/;
		$EventDateTime =~ s/Central Daylight Time/CDT/;
		$EventDateTime =~ s/Mountain Standard Time/MST/;
		$EventDateTime =~ s/Mountain Daylight Time/MDT/;
		$EventDateTime =~ s/Pacific Standard Time/PST/;
		$EventDateTime =~ s/Pacific Daylight Time/PDT/;
		$EventDateTime =~ s/Coordinated Universal Time/UTC/;
		# Creates Format of 2016-10-08 23:39:50 EDT
		#
		# EventTime as Integer for Milliseconds Since Epoch
		$EventTime = integer(now()) / 1000;
		# Rename EventReceivedTime to NXLogReceivedTime
		rename_field("EventTime","NXLogReceivedTime");
		# Convert to JSON
      		to_json();
	</Exec>
</Input>

#####################################
# Windows Event DC/DNS Log Parsing
#####################################

<Input in_wineventlog_dc>
	Module	im_msvistalog
	<QueryXML>
		<QueryList>
			<Query Id="0" Path="Security">
				<Select Path="DFS Replication">*[System[(Level=1  or Level=2 or Level=3)]]</Select>
				<Select Path="Directory Service">*[System[(Level=1  or Level=2 or Level=3)]]</Select>
				<Select Path="DNS Server">*[System[(Level=1  or Level=2 or Level=3)]]</Select>
			</Query>
		</QueryList>
	</QueryXML>
	<Exec>
		$NXLogFileType = "wineventlog";
		$NXLogHost = hostname_fqdn();
		$NXLogHostTimezone = strftime(now(), "%z");

		# Adjust Event Log Date & Time from Log Record and Add Timezone of Host
		$EventDateTime = $EventTime + " " + strftime(now(), "%z");
		# Change to Abbreviated Timezone for Elasticsearch Search
		$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
		$EventDateTime =~ s/Eastern Standard Time/EST/;
		$EventDateTime =~ s/Atlantic Standard Time/AST/;
		$EventDateTime =~ s/Central Standard Time/CST/;
		$EventDateTime =~ s/Central Daylight Time/CDT/;
		$EventDateTime =~ s/Mountain Standard Time/MST/;
		$EventDateTime =~ s/Mountain Daylight Time/MDT/;
		$EventDateTime =~ s/Pacific Standard Time/PST/;
		$EventDateTime =~ s/Pacific Daylight Time/PDT/;
		$EventDateTime =~ s/Coordinated Universal Time/UTC/;
		# Creates Format of 2016-10-08 23:39:50 EDT
		#
		# EventTime as Integer for Milliseconds Since Epoch
		$EventTime = integer(now()) / 1000;
		# Rename EventReceivedTime to NXLogReceivedTime
		rename_field("EventTime","NXLogReceivedTime");
		# Convert to JSON
      		to_json();
	</Exec>
</Input>

#####################################
# Windows Event Sysmon Log Parsing
#####################################

<Input in_wineventlog_sysmon>
	Module	im_msvistalog
	<QueryXML>
		<QueryList>
			<Query Id="0" Path="Security">
				<Select Path="Microsoft-Windows-Sysmon/Operational">*</Select>
			</Query>
		</QueryList>
	</QueryXML>
	<Exec>
		$NXLogFileType = "wineventlog";
		$NXLogHost = hostname_fqdn();
		$NXLogHostTimezone = strftime(now(), "%z");

		# Adjust Event Log Date & Time from Log Record and Add Timezone of Host
		$EventDateTime = $EventTime + " " + strftime(now(), "%z");
		# Change to Abbreviated Timezone for Elasticsearch Search
		$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
		$EventDateTime =~ s/Eastern Standard Time/EST/;
		$EventDateTime =~ s/Atlantic Standard Time/AST/;
		$EventDateTime =~ s/Central Standard Time/CST/;
		$EventDateTime =~ s/Central Daylight Time/CDT/;
		$EventDateTime =~ s/Mountain Standard Time/MST/;
		$EventDateTime =~ s/Mountain Daylight Time/MDT/;
		$EventDateTime =~ s/Pacific Standard Time/PST/;
		$EventDateTime =~ s/Pacific Daylight Time/PDT/;
		$EventDateTime =~ s/Coordinated Universal Time/UTC/;
		# Creates Format of 2016-10-08 23:39:50 EDT
		#
		# EventReceivedTime as Integer for Milliseconds Since Epoch
		$EventReceivedTime = integer(now()) / 1000;
		# Rename EventReceivedTime to NXLogReceivedTime
		rename_field("EventReceivedTime","NXLogReceivedTime");
		# Convert to JSON
      		to_json();
	</Exec>
</Input>

###################
# NPS Log Parsing
###################
<Input in_nps>
	Module im_file
	File "%NPSDIR%\\IN*.log"
	SavePos	TRUE
    	ReadFromLast TRUE
    	InputType multiline
	<Exec>
      		# Discard everything that doesn't seem to be an xml event   
      		if $raw_event !~ /^<Event>/ drop();

      		# Parse the xml event
      		parse_xml();

      		# Rewrite some fields 
      		$NXLogFileType = "nps";
		$NXLogHost = hostname_fqdn();
		$NXLogHostTimezone = strftime(now(), "%z");
		
		# Adjust Event Log Date & Time from Log Record and Add Timezone of Host
		$EventDateTime = $Timestamp + " " + strftime(now(), "%z");
		$EventDateTime =~ s/\//-/g; # Replace / with -
		# Change to Abbreviated Timezone for Elasticsearch Search
		$EventDateTime =~ s/Eastern Daylight Time/EDT/; 
		$EventDateTime =~ s/Eastern Standard Time/EST/;
		$EventDateTime =~ s/Atlantic Standard Time/AST/;
		$EventDateTime =~ s/Central Standard Time/CST/;
		$EventDateTime =~ s/Central Daylight Time/CDT/;
		$EventDateTime =~ s/Mountain Standard Time/MST/;
		$EventDateTime =~ s/Mountain Daylight Time/MDT/;
		$EventDateTime =~ s/Pacific Standard Time/PST/;
		$EventDateTime =~ s/Pacific Daylight Time/PDT/;
		$EventDateTime =~ s/Coordinated Universal Time/UTC/;
		# Creates Format of 10-08-2016 22:29:26.839 EDT
		#
		# EventReceivedTime as Integer for Milliseconds Since Epoch
		$EventReceivedTime = integer(now()) / 1000;
		# Rename EventReceivedTime to NXLogReceivedTime
		rename_field("EventReceivedTime","NXLogReceivedTime");				

		# Convert to JSON
      		to_json();
    	</Exec>
</Input>

<Output out_fluentd>
    Module      om_tcp
    Host        %FLUENTDIP%
    Port        5140
</Output>

<Route 1>
	Priority 5
	Path	in_nxlog_internal,in_wineventlog_standard,in_wineventlog_dc,in_wineventlog_sysmon,in_wineventlog_additional => diskbuffer_high => membuffer_high => out_fluentd
</Route>

<Route 2>
	Priority 10
	Path	in_nps,in_dhcp_12fields,in_dns,in_iis => diskbuffer_low => membuffer_low => out_fluentd
</Route>



##########################################
##              DEBUGGING               ##
##########################################
## DEBUG OUTPUT ONLY
## It is recommended to keep this DISABLED unless debugging/testing
## Enabling this (uncommenting) allows an Output to a file (can be specified)
## This file can get EXTREMELY Large very quickly
#<Output OutFile>
#  Module om_file
#   File "E:\\Test.log"
#</Output>

## DEBUG OUTPUT ONLY
## This Route will output the selected things to the Output File Defined above
## It is recommended to keep this DISABLED unless debugging/testing
## Enabling this (uncommenting) allows an Output to a file (can be specified)
## This file can get EXTREMELY Large very quickly
#<Route 2>
#    Path       in_dns => OutFile
#</Route>
